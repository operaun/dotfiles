set nocompatible
filetype off

set encoding=utf-8
set fileformat=unix
set noswapfile
set history=1000
set ruler
set sc
set number
set tabstop=2
set shiftwidth=2
set expandtab
set ls=2

set nowrap
set magic

set sel=exclusive
set mps+=<:>
set sm
set cursorline

set hlsearch
set nowrapscan
set ignorecase
set showmatch
set fdm=marker

set mouse=r

"filetype plugin indent on
"sy enable
"filetype on
if has("syntax")
   syntax on
endif

set autoindent
set cindent

set wmnu
set fdl=1
"set fdc=3

vmap <Tab> >gv
vmap <S-Tab> <gv

"""""""""""""" Mouse
"set mouse=a
"set ttymouse=xterm2

"""""""""""""" Paste
nnoremap <F8> :set invpaste paste?<CR>
set pastetoggle=<F8>
set showmode

"""""""""""""" Wrap
command! -nargs=* Wrap set wrap linebreak nolist


"""""""""""""" Python


"let python_highlight_all=1

au BufNewFile,BufRead *.py
  \set tabstop=4
  \set softtabstop=4
  \set shiftwidth=4
  \set textwidth=79

au BufNewFile,BufRead *.js, *.html, *.css
      \ set tabstop=2
      \ set softtabstop=2
      \ set shiftwidth=2

"python with virtualenv support
"py << EOF
"import os
"import sys
"if 'VIRTUAL_ENV' in os.environ:
"  project_base_dir = os.environ['VIRTUAL_ENV']
"  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
"  execfile(activate_this, dict(__file__=activate_this))
"EOF

"""""""""""""" Vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'

" Utilities
Plugin 'scrooloose/nerdtree'

Plugin 'tpope/vim-fugitive'

Plugin 'airblade/vim-gitgutter'

Plugin 'nathanaelkane/vim-indent-guides'

Plugin 'vim-airline/vim-airline-themes'

Plugin 'ctrlpvim/ctrlp.vim'

Plugin 'unimpaired.vim'

Plugin 'tpope/vim-surround'

Plugin 'tpope/vim-sensible'

"Plugin 'sheerun/vim-polyglot'

Plugin 'raimondi/delimitmate'

Plugin 'bling/vim-airline'
let g:airline#extensions#tabline#enabled = 1

Plugin 'matchit.zip'
:source ~/.vim/bundle/matchit.zip/plugin/matchit.vim

Plugin 'tmhedberg/SimpylFold'
set foldmethod=indent
set foldlevel=99
nnoremap <space> za
:highlight Folded guibg=grey guifg=blue
:highlight FoldColumn guibg=darkgrey guifg=white
let g:SimpylFold_docstring_preview = 1

Plugin 'a.vim' " Alternate
nmap <F2> :A<CR>
nmap <F1> <C-Space>

"Plugin 'ervandew/supertab'
"let g:SuperTabDefaultCompletionType = "<c-n>"

" Python
"Plugin 'klen/python-mode'
"Plugin 'python.vim'
"Plugin 'Valloric/YouCompleteMe'
"let g:ycm_autoclose_preview_window_after_completion=1
"map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
"let g:ycm_python_binary_path = 'python'
"Plugin 'nvie/vim-flake8'

"Plugin 'davidhalter/jedi-vim'
"autocmd FileType python setlocal completeopt-=preview

"Plugin 'shougo/neocomplete.vim'
"let g:neocomplete#enable_at_startup = 1
"let g:neocomplete#enable_smart_case = 1
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#sources#syntax#min_keyword_length = 2
"autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
"autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
"autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
"autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags alternative pattern: '\h\w*\|[^. \t]\.\w*'
"autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
"if !exists('g:neocomplete#sources#omni#input_patterns')
"  let g:neocomplete#sources#omni#input_patterns = {}
"endif

"autocmd FileType python setlocal omnifunc=jedi#completions
"let g:jedi#completions_enabled = 0
"let g:jedi#auto_vim_configuration = 0
"let g:neocomplete#sources#omni#input_patterns.python = '\h\w*\|[^. \t]\.\w*'
"let g:neocomplete#force_omni_input_patterns.python = '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'

"Plugin 'vim-scripts/indentpython.vim'
"let g:indent_guides_auto_colors = 0
"let g:indent_guides_enable_on_vim_startup = 1
"let g:indent_guides_guide_size=1
"let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
"hi IndentGuidesOdd ctermbg=black
"hi IndentGuidesEven ctermbg=darkgrey

"Plugin 'scrooloose/syntastic'
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

"let g:syntastic_always_populate_loc_list = 0
"let g:syntastic_auto_loc_list = 0
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

"""""""""""""" Color scheme
if &term =~ "xterm"
  let &t_Co=256  "256 color --
  " restore screen after quitting
  set t_ti=ESC7ESC[rESC[?47h t_te=ESC[?47lESC8
  if has("terminfo")
    let &t_Sf="\ESC[3%p1%dm"
    let &t_Sb="\ESC[4%p1%dm"
  else
    let &t_Sf="\ESC[3%dm"
    let &t_Sb="\ESC[4%dm"
  endif
  color jellybeans
elseif &term =~ "screen"
  set ttytype=xterm
  let &t_Co=256  "256 color --
  " restore screen after quitting
  set t_ti=ESC7ESC[rESC[?47h t_te=ESC[?47lESC8
  if has("terminfo")
    let &t_Sf="\ESC[3%p1%dm"
    let &t_Sb="\ESC[4%p1%dm"
  else
    let &t_Sf="\ESC[3%dm"
    let &t_Sb="\ESC[4%dm"
  endif
  color jellybeans
endif
