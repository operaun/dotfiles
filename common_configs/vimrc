set nocompatible
filetype off

set encoding=utf-8
set fileformat=unix
set history=1000
set ruler
set sc
set number
set tabstop=2
set shiftwidth=2
set expandtab
set ls=2

set nowrap
set magic

set sel=exclusive
set mps+=<:>
set sm
set cursorline

set hlsearch
set nowrapscan
set ignorecase
set showmatch
set fdm=marker

set mouse=r

"filetype plugin indent on
"sy enable
"filetype on
if has("syntax")
   syntax on
endif

set autoindent
set cindent

set wmnu
set fdl=1
"set fdc=3

vmap <Tab> >gv
vmap <S-Tab> <gv

"""""""""""""" Mouse
"set mouse=a
"set ttymouse=xterm2

"""""""""""""" Paste
nnoremap <F8> :set invpaste paste?<CR>
set pastetoggle=<F8>
set showmode

"""""""""""""" Wrap
command! -nargs=* Wrap set wrap linebreak nolist


"""""""""""""" Python
" Enable folding
"set foldmethod=indent
"set foldlevel=99
let python_highlight_all=1

au BufNewFile,BufRead *.py
\set tabstop=4
\set softtabstop=4
\set shiftwidth=4
\set textwidth=79

au BufNewFile,BufRead *.js, *.html, *.css
      \ set tabstop=2
      \ set softtabstop=2
      \ set shiftwidth=2

"python with virtualenv support
"py << EOF
"import os
"import sys
"if 'VIRTUAL_ENV' in os.environ:
"  project_base_dir = os.environ['VIRTUAL_ENV']
"  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
"  execfile(activate_this, dict(__file__=activate_this))
"EOF

"""""""""""""" Vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

Plugin 'vim-airline/vim-airline'
Plugin 'The-NERD-tree'
"Plugin 'AutoComplPop'
Plugin 'SuperTab'
Plugin 'matchit.zip'
Plugin 'unimpaired.vim'
"Plugin 'Syntastic'
Plugin 'python.vim'
Plugin 'a.vim'
"Plugin 'vim-startify'
"Plugin 'mileszs/ack.vim'

Plugin 'nvie/vim-flake8'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'tmhedberg/SimpylFold'
Plugin 'scrooloose/syntastic'
Plugin 'Valloric/YouCompleteMe'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

"""""""""""""" Color scheme
if &term =~ "xterm"
  let &t_Co=256  "256 color --
  " restore screen after quitting
  set t_ti=ESC7ESC[rESC[?47h t_te=ESC[?47lESC8
  if has("terminfo")
    let &t_Sf="\ESC[3%p1%dm"
    let &t_Sb="\ESC[4%p1%dm"
  else
    let &t_Sf="\ESC[3%dm"
    let &t_Sb="\ESC[4%dm"
  endif
  color jellybeans
elseif &term =~ "screen"
  set ttytype=xterm
  let &t_Co=256  "256 color --
  " restore screen after quitting
  set t_ti=ESC7ESC[rESC[?47h t_te=ESC[?47lESC8
  if has("terminfo")
    let &t_Sf="\ESC[3%p1%dm"
    let &t_Sb="\ESC[4%p1%dm"
  else
    let &t_Sf="\ESC[3%dm"
    let &t_Sb="\ESC[4%dm"
  endif
  color jellybeans
endif

"""""""""""""" matchit
:source ~/.vim/bundle/matchit.zip/plugin/matchit.vim

"""""""""""""" Alternate
nmap <F2> :A<CR>
nmap <F1> <C-Space>

"""""""""""""" Ack
let g:ackprg = 'ag --nogroup --nocolor --column'

"""""""""""""" YCM
let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'
let g:ycm_python_binary_path = '/usr/bin/python3'
let g:ycm_confirm_extra_conf = 0
let g:ycm_key_list_select_completion = ['<C-j>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-k>', '<Up>']
let g:ycm_warning_symbol = '>*'

let g:ycm_min_num_of_chars_for_completion = 2    " 기본값은 2입니다. 문자가 1개 입력되면 그 때부터 자동완성을 시작합니다. 쓰지 않을려면 99같은 큰 값을 넣어줍니다.
let g:ycm_auto_trigger = 1    " 기본값은 1입니다. '.'이나 '->'을 받으면 자동으로 목록들을 출력해주죠.
let g:ycm_collect_identifiers_from_tags_files = 1    " tags 파일을 사용합니다. 성능상 이익이 있는걸로 알고 있습니다.
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_filetype_whitelist = { '*': 1 }    " 화이트 리스트를 설정합니다.
let g:ycm_filetype_blacklist = {
      \ 'tagbar' : 1,
      \ 'qf' : 1,
      \ 'notes' : 1,
      \}    " 블랙 리스트를 설정합니다.

nnoremap <leader>g :YcmCompleter GoTo<CR>
nnoremap <leader>d :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>dd :YcmCompleter GoToDefinition<CR>
nnoremap <leader>r :YcmCompleter GoToReferences<CR>

"""""""""""""" startify
let g:startify_custom_header = [
                \ ' ______________________________________ ',
                \ '( Almost every programming language is )',
                \ '( overrated by its practitioners. --   )',
                \ '( Larry Wall                           )',
                \ ' ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ ',
                \ ]
